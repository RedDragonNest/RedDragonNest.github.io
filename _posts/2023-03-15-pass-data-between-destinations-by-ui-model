---
title: UiModel을 이용한 화면간 데이터 전달
tags: [Android, Clean Architecture, Ui Model]
style: fill
color: warning
description: UiModel을 이용하여 화면끼리 자료전달을 해도 될까/
---

## 1. 고민

UiModel을 현업에서 사용하면서 기존과는 다른 방식으로 개발하는 내 모습을 볼 수 있었다.   
좋은 방향으로 바뀐 모습이라고 생각한다.   
개발속도는 비슷한데, 내가 맡은 화면에서 나만의 스타일(팀에 해를 끼치지 않는 선에서)로 좀 더 자유롭게 코드를 생성할 수 있다.   
변수명만 잘 정의하고, 나중에 Mapper만 잘 연결하면 되니까.   
그러나 역시 순탄하지만은 않다. UiModel의 또 다른 고민점을 찾게 되었다.   

일반적으로 ViewModel에서 통신을 하고, 해당하는 DTO list를 UiModel list로 변환하여 갖고있게 된다.   

```kotlin
class SampleViewModel() : ViewModel() {
	private fun fetch() {
		val response = getSampleList()
		val uiModelList = response.list.toUiModel()
	}
}
```

고민점은 화면간의 자료전달은 어떻게 하냐이다.   
화면간의 자료전달은 보통 intent혹은 bundle에 자료를 태워 넘기게 된다.   
여기서 필요한 혹은 선택한 UiModel을 다음 화면으로 어떻게 넘길 것인가.   
다음 화면으로 넘어갈 때 UiModel로 넘길것인가? 아니면 DTO로 변환 후 넘길것인가?   
이 부분은 생각보다 깊게 생각해봐야하는 문제이다.   

## 먼저, UiModel로 자료를 넘길 때 장단점은 다음과 같다.   

#### 장점

* DTO -> UiModel -> 로직 처리 -> 자료전달로 간단히 자료를 넘기면 된다.   
	단순히 다음 화면에 필요한 자료인 UiModel만 넘기면 되기 때문에 큰 고민없이 자료를 넘기기만 하면 된다.   
* UiModel을 담고 있는 변수는 하나이기 때문에 관리가 쉽다.   
	하나의 UiModel list만 있으면 되니 문제될 것도 없고, 다른 관리포인트가 생기지 않기도 하다.   

#### 단점

* UiModel이 다음 화면을 위한 불필요한 필드를 추가로 갖고 있어야 한다.   
	만약 다음 화면에서 기존 UiModel을 재사용해야 한다면 다음 화면에서 필요한 불필요한 필드를 먼저 정의해놔야 한다. 많이 필요해지면 DTO 혹은 Model과 다를바 없어질 지 모른다.   
* 선행된 UiModel을 계속 이용하지 않을 시, UiModel -> UiModel Mapper가 있어야 한다.   
	단점 1번과 달리 선행된 UiModel을 사용하지 않을 시 첫 화면 UiModel -> 두번째 화면 UiModel의 Mapper가 필요하다.   
* 화면간 혹은 UiModel간의 의존도가 높다.   
	두번째 화면은 어찌되었든 첫번째 화면이 만들어지기 전에는 개발하는데에 어느정도 제약이 생긴다.   

## DTO로 변환 후 자료를 넘길 때 장단점은 다음과 같다.   

#### 장점   

* 화면간에 의존도가 낮다.   
	넘겨 받는 자료는 DTO이기 떄문에 화면끼리 참조하는 일은 거의 없다.   
* UiModel을 DTO처럼 사용하지 않을 수 있다.   
	당장 화면에서 쓸일 없는 필드는 최소화될 수 있다.   

#### 단점 

* DTO -> UiModel -> 로직 처리 -> UiModel -> DTO -> 자료전달 이라는 복잡한 과정을 겪어야 한다.   
	DTO에서 변환한 UiModel을 다시 DTO로 변환시켜야 하는 번거로운 과정이 필요하다. DTO로 변환하기 위해 색인 로직이 추가로 필요할지도 모른다.   
* 공간 효율이 떨어진다.
	다음 화면으로 넘길 DTO를 찾기 위해서 UiModel에 대응하는 DTO가 저장공간을 점유하고 있어야 한다.   

## 그래서 결론은?   

여기서부터는 개인적인 경험과 생각을 말해야 할 것 같다.   
뚜렷하게 이게 정답이다. 라고 할 수 없는 영역으로 보인다.   
내가 느끼고 있는 요즘 모바일 어플리케이션 프로그래밍의 특징은 다음과 같다.   

1. 공간 효율보다는 개발 효율   
	예전엔 RecyclerView Adapter에서 list를 관리할 때 하나의 list에 값을 넣고 빼서 notify하는 방식이었다면, 요즘은 ListAdapter에서 기존 list와 다른 새로운 list를 생성하여 넣어주어 갱신하는 방법이 대세가 되었기 때문이다.   
2. 재사용성 보다는 최소한으로 쪼개기   
	과거엔 어떤 동작을 하는 함수에 Flag로 parameter를 받아 내부에서 처리하는 방식이었다면, 요즘은 함수 하나가 하나의 동작을 하게 바뀌어 Flag로 분기하지 않고 함수를 n개 만들어 처리함으로서 함수 하나가 하나의 역할만 하게 나누고 있다.   
	게다가 멀티 모듈과 클린 아키텍처가 대세이지 않은가? UiModel을 직접 넘기는 방식은 클린 아키텍처의 심기를 약간 건드릴 수 있다.   

내 생각엔 결국엔 *UiModel을 DTO 혹은 model로 다시 변환하여 자료를 넘기는 방식이 방향성 측면에 좋다*고 본다.   
어떻게든 결합도를 낮추고 응집도를 높이려는 노력들을 하고있다.   
크게 보면 어플리케이션이고 작게보면 각각의 화면일 수 있다.   

> 각 모듈 혹은 화면은 각자가 외부의 요인에 영향을 크게 받지 않고 동작할 수 있어야 하며, 참조를 최대한 적게 해야 한다.   

UiModel로 자료를 태워 넘기면 위의 내용에 어긋날 수 있다고 보기 때문이다.
